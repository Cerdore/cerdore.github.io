<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://cerdore.github.io/</id><title>Cerdore</title><subtitle>A minimal, responsive, and powerful Jekyll theme for presenting professional writing.</subtitle> <updated>2022-05-06T16:29:16+00:00</updated> <author> <name>Cerdore</name> <uri>https://cerdore.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://cerdore.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="zh-CN" href="https://cerdore.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2022 Cerdore </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>2PC加强版--Percolator</title><link href="https://cerdore.github.io/posts/make2pcstronger_percolator/" rel="alternate" type="text/html" title="2PC加强版--Percolator" /><published>2022-05-05T14:51:14+00:00</published> <updated>2022-05-05T14:51:14+00:00</updated> <id>https://cerdore.github.io/posts/make2pcstronger_percolator/</id> <content src="https://cerdore.github.io/posts/make2pcstronger_percolator/" /> <author> <name>Cerdore</name> </author> <category term="技术" /> <category term="数据事务" /> <summary> Reference [1]. https://zhuanlan.zhihu.com/p/53197633 [2]. [TOC] 2PC 问题：如何保证多节点对某件事情的原子性 难点：节点可能宕机、网络可能分区、请求可能超时 方案： 2PC。Prepare + commit 两个阶段 缺点： 同步阻塞：协调者(Coordinator)宕机，Worker节点不清楚该怎么办了，事务可能会block 延时高：需要持久化 decision log Percolator 动机：为BigTable提供跨行跨表的事务原子性，同时解决 2PC 的同步阻塞问题。 方案：结合共识（Consensus）和 2PC 算法，将decision log 高可用，其他的信息也会保存primary key的decision log，有一台机器宕机没有影响。 缺点： 延时高... </summary> </entry> <entry><title>计算机网络总结</title><link href="https://cerdore.github.io/posts/computernetwork/" rel="alternate" type="text/html" title="计算机网络总结" /><published>2022-04-14T08:01:58+00:00</published> <updated>2022-04-14T08:01:58+00:00</updated> <id>https://cerdore.github.io/posts/computernetwork/</id> <content src="https://cerdore.github.io/posts/computernetwork/" /> <author> <name>Cerdore</name> </author> <category term="技术" /> <summary> </summary> </entry> <entry><title>操作系统总结</title><link href="https://cerdore.github.io/posts/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%80%BB%E7%BB%93/" rel="alternate" type="text/html" title="操作系统总结" /><published>2017-07-01T00:00:00+00:00</published> <updated>2022-04-14T02:25:12+00:00</updated> <id>https://cerdore.github.io/posts/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%80%BB%E7%BB%93/</id> <content src="https://cerdore.github.io/posts/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%80%BB%E7%BB%93/" /> <author> <name>Cerdore</name> </author> <category term="TOP_CATEGORIE" /> <category term="SUB_CATEGORIE" /> <summary> 操作系统 虚拟化 虚拟化面对的两个挑战 不增加系统开销的情况下实现虚拟化。 操作系统需要控制权，那在保持控制权的情况下实现虚拟化就是另一个挑战。 执行系统调用的过程 执行 trap 指令，跳入内核，并且将特权级别提升至内核模式。然后调用进程执行所需的工作。完成后，调用一个 return-from-trap 返回到发起调用的用户程序，降低特权级别，回到用户模式。 为什么会有中断？ 首先这里的背景是多个任务时分共享 CPU，操作系统需要进行资源管理。所以系统内核需要有控制权来管理多个进程，防止出现单个进程一直执行或者访问没有权限的资源。 软中断和硬中断？ 内存管理 进程与线程 </summary> </entry> <entry><title>Test</title><link href="https://cerdore.github.io/posts/test/" rel="alternate" type="text/html" title="Test" /><published>2017-02-22T00:00:00+00:00</published> <updated>2022-04-14T02:25:12+00:00</updated> <id>https://cerdore.github.io/posts/test/</id> <content src="https://cerdore.github.io/posts/test/" /> <author> <name>Cerdore</name> </author> <summary> Hello 树先生 </summary> </entry> </feed>
